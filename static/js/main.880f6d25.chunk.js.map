{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PHI","Math","sqrt","App","center","window","innerWidth","innerHeight","_useState","useState","_useState2","Object","slicedToArray","circleDivisions","setCircleDivisions","useEffect","requestAnimationFrame","react_default","a","createElement","id","width","height","Array","from","length","map","_","o","angle","radian","PI","key","i","cx","cos","cy","sin","r","style","stroke","concat","fill","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,UAAO,EAAIC,KAAKC,KAAK,IAAM,GAwDlBC,EAtDH,WACV,IAAMC,EAAcC,OAAOC,WAAa,EAAlCF,EAAwCC,OAAOE,YAAc,EADnDC,EAE8BC,mBAAS,GAFvCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAETK,EAFSH,EAAA,GAEQI,EAFRJ,EAAA,GAUhB,OANAK,oBAAU,WACJF,EAAkB,IACpBG,sBAAsB,kBAAMF,EAAmBD,EAAkB,MAElE,CAACA,IAGFI,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,OAAOC,OAAO,QACvBL,EAAAC,EAAAC,cAAA,KAAGC,GAAG,aACHG,MAAMC,KAAK,CAAEC,OAAQZ,IAAmBa,IAAI,SAACC,EAAGC,GAC/C,IAAIC,EAAS,IAAMhB,EAAmBe,EAAI,EACtCE,EAAUD,EAAQ5B,KAAK8B,GAAM,IAEjC,OACEd,EAAAC,EAAAC,cAAA,KAAGa,IAAKJ,GACLL,MAAMC,KAAK,CAAEC,OAHF,KAGqBC,IAAI,SAACC,EAAGM,GACvC,OACEhB,EAAAC,EAAAC,cAAA,UACEa,IAAKC,EACLC,GACE9B,EACCyB,EAAQ,EACP7B,EACAC,KAAKkC,IAAIL,EAAqB,EAAV7B,KAAK8B,GAXvB,GAW4CE,GAElDG,GACEhC,EACCyB,EAAQ,EACP7B,EACAC,KAAKoC,IAAIP,EAAqB,EAAV7B,KAAK8B,GAjBvB,GAiB4CE,GAElDK,EAAGV,EAAI3B,KAAK8B,GAAK,EACjBQ,MAAO,CACLC,OAAM,OAAAC,OAAS,GAAM,GArBjB,GAqBiCb,EAA/B,gBACNc,KAAI,QAAAD,OAAU,GACX,GAvBC,GAuBeb,EADf,kCChCRe,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.880f6d25.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nconst PHI = (1 + Math.sqrt(5)) / 2;\n\nconst App = () => {\n  const center = { x: window.innerWidth / 2, y: window.innerHeight / 2 };\n  const [circleDivisions, setCircleDivisions] = useState(2);\n\n  useEffect(() => {\n    if (circleDivisions < 55) {\n      requestAnimationFrame(() => setCircleDivisions(circleDivisions + 1));\n    }\n  }, [circleDivisions]);\n\n  return (\n    <div id=\"App\">\n      <svg width=\"100%\" height=\"100%\">\n        <g id=\"sunflower\">\n          {Array.from({ length: circleDivisions }).map((_, o) => {\n            let angle = (360 / circleDivisions) * o + 1;\n            let radian = (angle * Math.PI) / 180;\n            const radials = 21;\n            return (\n              <g key={o}>\n                {Array.from({ length: radials }).map((_, i) => {\n                  return (\n                    <circle\n                      key={i}\n                      cx={\n                        center.x +\n                        (angle / 2) *\n                          PHI *\n                          Math.cos(radian + ((Math.PI * 2) / radials) * i)\n                      }\n                      cy={\n                        center.y +\n                        (angle / 2) *\n                          PHI *\n                          Math.sin(radian + ((Math.PI * 2) / radials) * i)\n                      }\n                      r={o / Math.PI / 2}\n                      style={{\n                        stroke: `hsl(${90 - (30 / radials) * o}, 100%, 50%)`,\n                        fill: `hsla(${90 -\n                          (30 / radials) * o}, 100%, 50%, 0.25)`\n                      }}\n                    />\n                  );\n                })}\n              </g>\n            );\n          })}\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}